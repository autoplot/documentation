from java.util import ArrayList
from java.util.regex import Pattern
from java.io import File
from org.das2.util import FileUtil
setScriptDescription('''Tweak the markdown found in the file, writing
a new version of the file.  This handles:<ul>
<li> the embedded movies by linking to youtube
<li> fixes links automatically added for part of a URI
<li> re-encodes the unicode characters
<li> removes the "addhtml" blocks
<li> re-combines lines of code to make block
<li> internal links need ".md" added to name.  These have "wikilink" 
<li> rerun again after downloading changes from autoplot.org.
<li> internal links to hashes (#Wildcard_codes) don't work.
<li> blocks of code with empty lines delimiting need to be combined.
</ul>
Thanks https://regex101.com/.
''')

from org.das2.util.filesystem import HtmlUtil
from org.das2.util import Entities

c= { 'stringType':'file', 'regex':'.*\.md' }
f= getParam('f','/home/jbf/tmp/git/autoplot/documentation/to_md/jyds_extensions.md','markdown file',c)

c= { 'stringType':'directory' }
w= getParam('w','/home/jbf/tmp/git/autoplot/documentation/md/','output folder',c) 

outf= File( w, File(f).name )

ss= FileUtil.readFileToString(File(f))

iframeRegex= '''\<iframe width="(\d+)" height="(\d+)" src="https:\/\/www\.youtube\.com\/embed\/(.+)\?rel=0" title="(.+)" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen><\/iframe>'''
iframeTest=  '''<iframe width="560" height="315" src="https://www.youtube.com/embed/PcB3feFYb_4?rel=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>'''

iframePattern= Pattern.compile(iframeRegex)

uriBrokeRegex= '\`(vap\+[a-z]+)\:\`\<(.+)\>'
uriBrokeTest= '`vap+cdf:`<http://autoplot.org/data/autoplot.cdf?BGSM>'
uriBrokePattern= Pattern.compile(uriBrokeRegex)

wikilinkRegex= '(.*)\[(.*)\]\((.*) \"wikilink\"\)(.*)'
wikilinkTest= '[Annotations](Annotations "wikilink")'
wikilinkPattern= Pattern.compile(wikilinkRegex)

fileRegex= '(.*)\`\<((file|http|https)\:.*)>\`(.*)'
fileTest= 'System.setProperty("jydsExtension_sps","`<file:/home/jbf/project/earth/svn/public/jyds/readTypeSps.jyds>`")'
filePattern= Pattern.compile(fileRegex)

def wikilink(l):
    i= l.find('#')
    if i==-1:
        return l+".md"
    anchor= l[i+1:]
    anchor= anchor.lower()
    anchor= anchor.replace(' ','-').replace('_','-')
    anchor= anchor.replace('[\(\)]','')
    if i==0:
        return l[0:i]+"#"+anchor
    else:
        return l[0:i]+".md#"+anchor
    
if outf.exists():
    #outf.delete()
    raise Exception('output file already exists: '+str(outf))

out= open(str(outf),'w')

def shouldEncode(s):
    for c in s:
        if ord(c)>128:
            return True
    return False
    
i=0
codeBlock=ArrayList()

for s in ss.split('\n'):
    i=i+1
    
    # combine adjacent code lines into a block. 
    tc= s.strip()
    hasQuotes= len(tc)>0 and tc[0]=='`' and tc[-1]=='`'
    if hasQuotes or ( codeBlock.size()>0 and len(tc)==0 ):
        tc= tc.replace(chr(160),' ')
        tc= tc[1:-1]
        mm= filePattern.matcher(tc)
        if mm.matches():
            tc= mm.group(1) + mm.group(2) + mm.group(4)
        codeBlock.add(tc)
        continue
    elif codeBlock.size()>0:
        out.write('```\n')
        while codeBlock[codeBlock.size()-1]=='':
            codeBlock.remove(codeBlock.size()-1)
        for s1 in codeBlock:
            out.write(s1)
            out.write('\n')
        out.write('```\n')
        codeBlock.clear()

    if shouldEncode(s):
       s= Entities.encode(s)    
    
    mm= iframePattern.matcher(s)
    if mm.matches():
        vidid= mm.group(3)
        title= mm.group(4)
        s= '[![%s](https://img.youtube.com/vi/%s/0.jpg)](http://www.youtube.com/watch?v=%s "%s")' % ( title, vidid, vidid, title ) 

    mm= uriBrokePattern.matcher(s)
    if mm.matches():
        uriPrefix= mm.group(1)
        uri= mm.group(2)
        s= '`' + uriPrefix + ':' + uri + '`'

    mm= wikilinkPattern.matcher(s)
    if mm.matches():
        pre= mm.group(1)
        label= mm.group(2)
        url= wikilink(mm.group(3))
        post= mm.group(4)
        s= '%s[%s](%s \"wikilink\")%s' % ( pre, label, url, post )

    if s.strip().startswith('<addhtml'):
        s= ''
    if s.strip().startswith('</addhtml>'):
        s= ''        
        
    out.write(s)
    out.write('\n')
    
out.close()

setStatus( 'wrote ' + str(outf) )
